import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js/auto';

function ChartJs({ levelPercentages }) {
  const chartRef = useRef(null);

  // Define constant colors for each label
  const colors = {
    Info: 'rgba(54, 162, 235, 0.5)',    // Blue
    Low: 'rgba(75, 192, 192, 0.5)',     // Teal
    Medium: 'rgba(255, 205, 86, 0.5)',  // Yellow
    High: 'rgba(255, 159, 64, 0.5)',    // Orange
    Critical: 'rgba(255, 99, 132, 0.5)' // Red
  };

  useEffect(() => {
    // Assign constant colors based on the label, regardless of percentage
    const backgroundColors = [
      colors.Info, 
      colors.Low, 
      colors.Medium, 
      colors.High, 
      colors.Critical
    ].slice(0, levelPercentages.length); // Adjust the number of colors based on the levels

    const borderColors = backgroundColors.map((color) => color.replace('0.5', '1')); // Make borders darker

    // Labels with the color and percentage value
    const labels = [
      'Info',
      'Low',
      'Medium',
      'High',
      'Critical',
    ].slice(0, levelPercentages.length); // Adjust labels based on the number of values

    // Combining labels with their respective color and percentage
    const coloredLabels = labels.map((label, index) => {
      const percentage = levelPercentages[index];
      const color = backgroundColors[index];
      return {
        label: `${label}: ${percentage}%`, // Label with percentage
        color: color, // Color for the label
      };
    });

    // If a chart already exists, destroy it before re-creating
    if (chartRef.current) {
      chartRef.current.destroy();
    }

    chartRef.current = new Chart(document.getElementById('polarAreaChart'), {
      type: 'polarArea',
      data: {
        datasets: [{
          data: levelPercentages,
          backgroundColor: backgroundColors,
          borderColor: borderColors,
          borderWidth: 2, // Set border width
        }],
        labels: coloredLabels.map(item => item.label), // Apply dynamic labels
      },
      options: {
        maintainAspectRatio: false,
        responsive: true,
        animation: {
          animateRotate: true, // Rotate animation for smoother transitions
        },
        plugins: {
          legend: {
            position: 'top',
            labels: {
              font: {
                family: 'Segoe UI, Tahoma, Geneva, Verdana, sans-serif', // Clean, modern font
                weight: '400',
              },
              // Apply colors to legend labels dynamically
              generateLabels: (chart) => {
                return chart.data.labels.map((label, i) => {
                  const color = backgroundColors[i];
                  return {
                    text: label,
                    fillStyle: color,
                    strokeStyle: color,
                    lineWidth: 2,
                    fontSize: 12,
                  };
                });
              }
            },
          },
        },
      },
    });

    // Cleanup chart instance on component unmount
    return () => {
      if (chartRef.current) {
        chartRef.current.destroy();
      }
    };
  }, [levelPercentages]);

  return (
    <div style={{ width: '400px', height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
      <canvas id="polarAreaChart" width={'400px'} height={'400px'}></canvas>
    </div>
  );
}

export default ChartJs;
