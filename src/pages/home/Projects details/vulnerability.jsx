import React, { useState } from 'react';
import screenshot1 from '../../assets/vul-1.png';
import screenshot2 from '../../assets/vul-2.png';

// Modal component to display images
const ImageModal = ({ imageSrc, onClose }) => {
    return (
        <div className="modal" style={modalStyles}>
            <div className="modal-content" style={modalContentStyles}>
                <span onClick={onClose} style={closeButtonStyles}>&times;</span>
                <img src={imageSrc} alt="Expanded view" style={expandedImageStyles} />
            </div>
        </div>
    );
};

const VulnerabilityReport = () => {
    const [selectedImage, setSelectedImage] = useState(null);

    const data = [
        { label: 'Vulnerability ID', value: 'X-001' },
        { label: 'Title', value: 'Open Redirect Vulnerability (Response Injection)' },
        { label: 'Severity', value: 'high' }, // Severity for row color
        { label: 'Target', value: 'https://app.qpiai-pro.tech' },
        { label: 'Description', value: 'Open Redirect Vulnerability occurs when an application improperly processes user-supplied input for URLs, allowing an attacker to manipulate the redirection target. In this case, the application does not validate the redirection URL parameter, enabling an attacker to alter the destination. For example, during a login request captured in Burp Proxy, changing the original redirection URL https://app.qpiai-pro.tech/dashboard to evil.com caused the user to be redirected to the malicious evil.com website.' },
        { label: 'Observation', value: 'The login request allows user-controlled redirection without proper validation. Changing the URL parameter from https://app.qpiai-pro.tech/dashboard to evil.com redirects users to a potentially malicious site.' },
        {
            label: 'Steps To Reproduce',
            value: [
                'Capture the Request with Burp Suite.',
                'Identify and modify the redirect parameter to evil.com.',
                'Observe redirection to the malicious URL.'
            ],
            images: [screenshot1, screenshot2] // Add images for this section
        },
        {
            label: 'Impact',
            value: [
                'Phishing Attacks.',
                'Loss of User Trust.',
                'Session Hijacking.'
            ]
        },
        {
            label: 'Remediation',
            value: [
                'Validate Redirect URLs.',
                'Use Relative URLs for internal redirections.'
            ]
        },
        { label: 'Reference', value: 'https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html' },
    ];

    const openImage = (img) => {
        setSelectedImage(img);
    };

    const closeImage = () => {
        setSelectedImage(null);
    };

    // Function to get styles based on severity
    const getRowStyle = (severity) => {
        switch (severity.toLowerCase()) {
            case 'info':
                return { backgroundColor: '#007bff', color: '#fff', fontSize:'bold' }; // Primary
            case 'low':
                return { backgroundColor: '#28a745', color: '#fff' }; // Green
            case 'medium':
                return { backgroundColor: '#ffc107', color: '#212529' }; // Yellow
            case 'high':
                return { backgroundColor: '#ff9800', color: '#fff', fontSize:'bold' }; // Warning
            case 'critical':
                return { backgroundColor: '#dc3545', color: '#fff' }; // Danger
            default:
                return {};
        }
    };

    return (
        <div>
            <h2>Vulnerability Report</h2>
            <table className="table table-bordered">
                <thead>
                    <tr className='bg-black'>
                        <th className='text-white'>Attribute</th>
                        <th className='text-white'>Details</th>
                    </tr>
                </thead>
                <tbody> 
                    {data.map((item, index) => (
                        <React.Fragment key={index}>
                            <tr style={item.label === 'Severity' ? getRowStyle(item.value) : {}}>
                                <td>{item.label}</td>
                                <td>
                                    {item.label === 'Severity' ? (
                                            <span style={{ fontWeight: 'bold'}}>
                                                {item.value.toUpperCase()}
                                            </span>
                                        ) :Array.isArray(item.value) ? (
                                        <ul>
                                            {item.value.map((point, idx) => (
                                                <li key={idx}>{point}</li>
                                            ))}
                                        </ul>
                                    ) : typeof item.value === 'string' && item.value.startsWith('http') ? (
                                        <a href={item.value} target="_blank" rel="noopener noreferrer">
                                            {item.value}
                                        </a>
                                    ) : (
                                        item.value
                                    )}
                                    {/* Render images below the text if this is the Steps To Reproduce section */}
                                    {item.label === 'Steps To Reproduce' && item.images && item.images.length > 0 && (
                                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', justifyContent: 'center', marginTop: '10px' }}>
                                            {item.images.map((img, imgIndex) => (
                                                <img
                                                    key={imgIndex}
                                                    src={img}
                                                    alt={`Screenshot ${imgIndex + 1}`}
                                                    style={{ maxWidth: '300px', height: 'auto', display: 'block', margin: '10px', cursor: 'pointer' }}
                                                    onClick={() => openImage(img)} // Click to open image
                                                />
                                            ))}
                                        </div>
                                    )}
                                </td>
                            </tr>
                        </React.Fragment>
                    ))}
                </tbody>
            </table>
            {selectedImage && <ImageModal imageSrc={selectedImage} onClose={closeImage} />} {/* Show modal if an image is selected */}
        </div>
    );
};

// Styles for the modal
const modalStyles = {
    display: 'flex',
    position: 'fixed',
    zIndex: 10000,
    left: 0,
    top: 0,
    width: '100%',
    height: '100%',
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
};

const modalContentStyles = {
    position: 'relative',
    padding: '20px',
    background: 'transparent',
    borderRadius: '8px',
};

const closeButtonStyles = {
    position: 'absolute',
    top: '10px',
    right: '20px',
    cursor: 'pointer',
    fontSize: '24px',
    color: '#fff',
};

const expandedImageStyles = {
    maxWidth: '50%', // Use a percentage to make it responsive
    maxHeight: '50%',
    display: 'block', // Make sure the image behaves like a block element
    margin: '0 auto'
};

// Export the component
export default VulnerabilityReport;
