import React, { useEffect, useState } from 'react';
import { Panel, PanelHeader, PanelBody } from '../../../../components/panel/panel.jsx';
import DataTable from 'react-data-table-component';
import { Modal, Button, Form } from 'react-bootstrap';
import QuillEditor from './Quilleditor.jsx'; // Import your QuillEditor component
import 'bootstrap-icons/font/bootstrap-icons.css';
import ReactQuill from 'react-quill';

const Report = () => {
  const [showModal, setShowModal] = useState(false);
  const [showQuillModal, setShowQuillModal] = useState(false);
  const [validated, setValidated] = useState(false);
  const [showSubmitted, setShowSubmitted] = useState(false); // Track filter state
  const [formData, setFormData] = useState({
    templateSource: '',
    issueTitle: ''
  });
  const [activeRowId, setActiveRowId] = useState(null); // Track the active row for the Quill modal
  const [data, setData] = useState([
    { id: 1, name: 'Anne Nader', proofOfConcept: '', severity: 'Low', issueStatus: 'Open', createDate: '', references: '', description: '', tags: '' },
    { id: 2, name: 'Amber Leffler', proofOfConcept: '', severity: 'Low', issueStatus: 'Open', createDate: '', references: '', description: '', tags: '' },
    { id: 3, name: 'Andres Bosco', proofOfConcept: '', severity: 'Low', issueStatus: 'Open', createDate: '', references: '', description: '', tags: '' },
  ]);

  const columns = [
    { name: 'Name', selector: row => row.name, sortable: true },
    {
      name: 'Severity',
      selector: row => row.severity,
      cell: row => (
        <span className={`badge ${row.severity === 'Info' ? 'bg-primary' :
            row.severity === 'Low' ? 'bg-success' :
              row.severity === 'Medium' ? 'bg-yellow text-dark' :
                row.severity === 'High' ? 'bg-warning' :
                  'bg-danger'
          } fs- p-2`}>
          {row.severity}
        </span>
      )
    },
    { name: 'Status', selector: row => row.issueStatus }
  ];

  const [selectedRows, setSelectedRows] = useState([]);

  const handleRowSelected = ({ selectedRows }) => {
    setSelectedRows(selectedRows);
  };

  const handleDelete = () => {
    const remainingRows = data.filter(row => !selectedRows.some(selected => selected.id === row.id));
    setData(remainingRows);
    setSelectedRows([]); // Clear selection
  };

  const handleRowDataChange = (id, field, value) => {
    setData(prevData =>
      prevData.map(row =>
        row.id === id ? { ...row, [field]: value } : row
      )
    );
  };

  const handleShowSubmitted = () => {
    setShowSubmitted(!showSubmitted);
  };

  const filteredData = showSubmitted ? data.filter(row => row.isSubmitted === true) : data;

  const handleQuillSave = (content) => {
    handleRowDataChange(activeRowId, 'proofOfConcept', content);
    setShowQuillModal(false);
    setActiveRowId(null);
  };

  const ExpandedComponent = ({ data }) => (
    <Form onSubmit={(e) => {
      e.preventDefault();
      handleRowDataChange(data.id, 'isSubmitted', true);
      console.log('Submitted data for row:', data);
    }}>
      <div className="d-flex w-auto">
        <div className="flex-grow-1 m-1" style={{ width: '32vh' }}>
          <Form.Group controlId={`proofOfConcept-${data.id}`}>
            <Form.Label>Proof of Concept</Form.Label>
            <div
              onClick={() => {
                setActiveRowId(data.id);
                setShowQuillModal(true);
              }}
              style={{
                maxHeight: '210px',
                overflow: 'auto',
              }}
            >
              <ReactQuill
                value={data.proofOfConcept}
                modules={{ toolbar: false }}
                placeholder="Click to expand editor"
                className="form-control"
                readOnly
                style={{ minHeight: '210px' }}
              />
            </div>
          </Form.Group>
        </div>
        <div className="flex-grow-1 m-1">
          <Form.Group controlId={`severity-${data.id}`} className="mt-3">
            <Form.Label>Severity</Form.Label>
            <Form.Control
              as="select"
              value={data.severity}
              onChange={(e) => handleRowDataChange(data.id, 'severity', e.target.value)}
            >
              <option value="Info">Info</option>
              <option value="Low">Low</option>
              <option value="Medium">Medium</option>
              <option value="High">High</option>
              <option value="Critical">Critical</option>
            </Form.Control>
          </Form.Group>

          <Form.Group controlId={`issueStatus-${data.id}`} className="mt-3">
            <Form.Label>Issue Status</Form.Label>
            <Form.Control
              as="select"
              value={data.issueStatus}
              onChange={(e) => handleRowDataChange(data.id, 'issueStatus', e.target.value)}
            >
              <option value="Open">Open (Waiting for review)</option>
              <option value="In Progress">Fix in progress</option>
              <option value="Resolved">Fixed</option>
              <option value="Closed">Won't Fix</option>
            </Form.Control>
          </Form.Group>

          <Form.Group controlId={`createDate-${data.id}`} className="mt-3">
            <Form.Label>Create Issue Date</Form.Label>
            <Form.Control
              type="date"
              value={data.createDate}
              onChange={(e) => handleRowDataChange(data.id, 'createDate', e.target.value)}
            />
          </Form.Group>
        </div>
      </div>

      <Form.Group controlId={`references-${data.id}`} className="mt-3">
        <Form.Label>References</Form.Label>
        <Form.Control
          type="url"
          placeholder="https://example.com"
          value={data.references}
          onChange={(e) => handleRowDataChange(data.id, 'references', e.target.value)}
        />
      </Form.Group>

      <Form.Group controlId={`description-${data.id}`} className="mt-3">
        <Form.Label>Description</Form.Label>
        <Form.Control
          as="textarea"
          rows={4}
          placeholder="Enter description"
          value={data.description}
          onChange={(e) => handleRowDataChange(data.id, 'description', e.target.value)}
        />
      </Form.Group>

      <Form.Group controlId={`tags-${data.id}`} className="mt-3">
        <Form.Label>Tags</Form.Label>
        <Form.Control
          type="text"
          placeholder="Enter tags"
          value={data.tags}
          onChange={(e) => handleRowDataChange(data.id, 'tags', e.target.value)}
        />
      </Form.Group>
      <Button type="submit" className="mt-3">Submit</Button>
    </Form>
  );

  const handleSubmit = (e) => {
    e.preventDefault();
    const form = e.currentTarget;

    if (form.checkValidity() === false) {
      e.stopPropagation();
      setValidated(true);
    } else {
      const newEntry = { id: Math.random(), name: formData.issueTitle };
      setData(prevData => [...prevData, newEntry]);

      setFormData({ templateSource: '', issueTitle: '' });
      setValidated(false);
      setShowModal(false);
    }
  };

  return (
    <div>
      <div className='d-flex justify-content-between p-2'>
        <button className="btn btn-primary mx-3" onClick={handleShowSubmitted}>{showSubmitted ? 'Show All' : 'Submitted'}</button>
        <button className="btn btn-primary mx-3" onClick={() => setShowModal(true)}>+ Vulnerability</button>
      </div>
      <div>
        <Panel>
          <PanelHeader>Vulnerabilities</PanelHeader>
          <PanelBody>
            {selectedRows.length > 0 && (
              <div className="mb-3">
                <button className="btn btn-danger" onClick={handleDelete}>
                  Delete
                </button>
              </div>
            )}
            <DataTable
              columns={columns}
              data={filteredData}
              selectableRows
              onSelectedRowsChange={handleRowSelected}
              expandableRowsComponent={ExpandedComponent}
              expandableRows
              pagination
            />
          </PanelBody>
        </Panel>
      </div>

      {/* Modal for Quill Editor */}
      <Modal show={showQuillModal} onHide={() => setShowQuillModal(false)} size="lg" fullscreen>
        <Modal.Header closeButton>
          <Modal.Title>Edit Proof of Concept</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <QuillEditor
            editorContent={data.find(row => row.id === activeRowId)?.proofOfConcept || ''}
            setEditorContent={(content) => {
              // Update only the active row's proofOfConcept
              handleRowDataChange(activeRowId, 'proofOfConcept', content);
            }}
            isExpanded={true}
          />
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowQuillModal(false)}>Close</Button>
        </Modal.Footer>
      </Modal>

      {/* Modal for Vulnerability Form */}
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Add Vulnerability</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form noValidate validated={validated} onSubmit={handleSubmit}>
            <Form.Group controlId="templateSource">
              <Form.Label>Template Source</Form.Label>
              <Form.Control
                as="select"
                name="templateSource"
                value={formData.templateSource}
                onChange={(e) => setFormData({ ...formData, templateSource: e.target.value })}
                required
              >
                <option value="">Select Template Source</option>
                <option value="vulnerability">Vulnerability</option>
                <option value="cve">CVE (online database)</option>
                <option value="owasp">OWASP Top 10 2021 Web Application</option>
              </Form.Control>
              <Form.Control.Feedback type="invalid">
                Please select a template source.
              </Form.Control.Feedback>
            </Form.Group>
            <Form.Group controlId="issueTitle" className="mt-3">
              <Form.Label>Issue Title</Form.Label>
              <Form.Control
                type="text"
                name="issueTitle"
                placeholder="Enter Issue Title"
                value={formData.issueTitle}
                onChange={(e) => setFormData({ ...formData, issueTitle: e.target.value })}
                required
              />
              <Form.Control.Feedback type="invalid">
                Please enter an issue title.
              </Form.Control.Feedback>
            </Form.Group>
            <Button type="submit" className="mt-3">Submit</Button>
          </Form>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default Report;
